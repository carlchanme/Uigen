name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Project Setup
        run: |
          npm run setup
          npm run dev:daemon

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          prompt: |
            The project is already set up with all dependencies installed.
            The server is already running at localhost:3000. Logs from it
            are being written to logs.txt. If needed, you can query the
            db with the 'sqlite3' cli. If needed, use the mcp__playwright
            set of tools to launch a browser and interact with the app.

            IMPORTANT: You are responding to a GitHub issue or PR comment that mentioned @claude. You MUST:
            1. First use `gh issue view` or `gh pr view` to see what the user is asking
            2. Perform the requested task (test functionality, fix bugs, etc.)
            3. Post your response as a comment using `gh issue comment` or `gh pr comment`

            The workflow was triggered by someone mentioning @claude in a GitHub issue or PR. Use the GitHub CLI tools to find out what they need help with, then help them and respond.

          claude_args: |
            --mcp-config '{
              "mcpServers": {
                "playwright": {
                  "command": "npx",
                  "args": [
                    "@playwright/mcp@latest",
                    "--allowed-origins",
                    "localhost:3000;cdn.tailwindcss.com;esm.sh"
                  ]
                }
              }
            }' --allowedTools "
              Bash(npm:*),
              Bash(sqlite3:*),
              Bash(gh issue comment:*),
              Bash(gh pr comment:*),
              Bash(gh issue view:*),
              Bash(gh pr view:*),
              Bash(gh issue list:*),
              Bash(gh pr list:*),
              Bash(echo:*),
              Bash(env:*),
              Bash(git log:*),
              Bash(git status:*),
              mcp__playwright__browser_snapshot,
              mcp__playwright__browser_click,
              mcp__playwright__browser_init,
              mcp__playwright__browser_navigate,
              mcp__playwright__browser_get_context
            "
